*** CODING BEST PRACTICES ***

The following best practices make code easier to read, easier to maintain,
and easier to debug.  Consistent use of these guidelines means less guess
work for developers, which means happier, more productive developers.

* 	Adhere to "Don't Repeat Yourself" (DRY) principles of code design and
	organization. If you are copy-and-pasting code YOU ARE DOING SOMETHING WRONG.
	If you find a block of code that you want to use multiple times, make a
	function.  If you find views that are identical except for a single value,
	pull it out into a generic view that takes an option.

* 	Embrace the SOLID and GRASP design principles for OO design:
	http://nikic.github.io/2011/12/27/Dont-be-STUPID-GRASP-SOLID.html

* 	Whitespace is free.  Don't be afraid to use it to separate blocks of code.
	Use a single space to separate function params and string concatenation.

* 	Use self-documenting variable names.  $group_guids is better than $array.

*   Use "positive" variable names. Prefer `$enable = true` to `$disable = false`.

* 	Where possible, have functions/methods return a single type, using falsey
	values such as array(), "", or 0 to indicate no results.

* 	Functions not throwing an exception on error should return FALSE upon
	failure.

* 	Functions returning only boolean should be prefaced with is_ or has_ (eg,
	elgg_is_logged_in(), elgg_has_access_to_entity()).

* 	Ternary syntax is acceptable only for single-line, non-embedded statements.

* 	Use comments effectively.  Good comments describe the "why."  Good code
	describes the "how."  Ex:
		Not a very useful comment:

		// increment $i only when the entity is marked as active.
		foreach($entities as $entity) {
			if ($entity->active == TRUE) {
				$i++;
			}
		}

		Useful comment:

		// find the next index for inserting a new active entity.
		foreach($entities as $entity) {
			if ($entity->active == TRUE) {
				$i++;
			}
		}

* 	Commit effectively: Err on the side of atomic commits.  One revision with
	many changes is scary.

* 	Follow this format for commit messages:

	```
	type(component): summary

	Optional body
	Details about the solution.
	Opportunity to call out as breaking change.

	Closes/Fixes/Refs #123, #456, #789
	```

	Where `type` is one of:
	 * feature
	 * fix
	 * docs (when *only* docs are being updated)
	 * chore (refactoring, style changes, add missing tests, Travis stuff, etc.)
	 * perf (any change expected to improve performance)
	 * security (any change to affecting a security issue)

	And `component` is one of:
	 * i18n
	 * seo
	 * a11y
	 * cache
	 * db
	 * views
	 * session
	 * router
	 * etc...

	All lines of the commit message must be less than 100 characters long.

	Here is an example of a good commit message:

	```
	perf(upgrade): speeds up migrating remember me codes

	The Remember me cookie implementation has been improved by moving codes
	to a separate table. This performs that migration in one query.

	Fixes #6204
	```

	A git commit-msg hook can be installed to test for commit messages locally.
	To enable this, copy or symlink the .scripts/validate_commit_msg.php to
	.git/hooks/commit-msg and make sure it's executable.
